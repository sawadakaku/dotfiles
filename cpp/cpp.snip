include c.snip

# #include <...>
snippet inc
options     head
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
options     head
alias   #inc2, #include2
    #include "${1}"${0}

snippet     template
abbr        template <T>
    template<typename ${1:T}> ${0}

snippet     class
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    public:
        $1(${3});
    };
    $1::$1($3) {
        ${0:TARGET}
    }

snippet     class-without-constructor
options     head
abbr        class {}
    class ${1:#:name} {
        ${2}
    };

snippet     try
options     head
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
options     head
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
options     head
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
options     head
snippet     namespace
abbr        namespace {}
    namespace ${1:#:name} {
        ${0:TARGET}
    } // namespace $1

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     cout
options     word
  std::cout << ${0:TARGET} << std::endl;

snippet     cin
options     word
  std::cin >> ${0:TARGET};

snippet     procom
abbr        #include<iostream> int main...
    #include <iostream>
    #include <iomanip>
    #include <string>
    #include <vector>
    #include <algorithm>
    #include <numeric>
    #include <utility>
    #include <sys/time.h>
    #include <cmath>
    #include <tuple>
    #include <queue>
    #include <bitset>

    using namespace std;

    void solve() {
    }

    int main() {
        struct timeval start,end;
        long long span;
        int n;

        gettimeofday(&start,NULL);

        std::cin >> n;
        ${0};
        solve();

        gettimeofday(&end,NULL);
        span = (end.tv_sec -start.tv_sec)*1000000LL + (end.tv_usec - start.tv_usec);
        std::cerr << "--Total Time: " << span/1000 << "ms" << endl;
        return 0;
    }

snippet     ll
abbr        long long ...
options     word
    long long


snippet     vint
options     word
abbr        vector<int> ...
    vector<int> ${0};

snippet     vll
options     word
abbr        vector<long long> ...
    vector<long long> ${0};

snippet     vvi
options     word
abbr        vector< vector<int> > ...
    vector< vector<int> > ${0};

snippet     vvll
options     word
abbr        vector< vector<long long> > ...
    vector< vector<long long> > ${0};

snippet     stcll
abbr        static_cast<long long>(...)
options     word
    static_cast<long long>()

snippet     stcd
abbr        static_cast<double>(...)
options     word
    static_cast<double>()

snippet     gcj
abbr        
options     head
    #include <iostream>
    #include <string>
    #include <vector>
    #include <algorithm>
    #include <numeric>
    #include <utility>
    #include <sys/time.h>
    #include <iomanip>

    using namespace std;

    void solve() {
        struct timeval start,end;
        long long span;
        gettimeofday(&start,NULL);

        gettimeofday(&end,NULL);
        span = (end.tv_sec -start.tv_sec)*1000000LL + (end.tv_usec - start.tv_usec);
        std::cerr << " Time: " << span/1000 << "ms" << endl;
    }

    int main() {
        struct timeval start,end;
        long long span;
        int t;
        gettimeofday(&start,NULL);

        std::cin >> t;
        for (int i = 0; i < t; i++) {
            std::cerr << "Case #" << i+1;
            std::cout << "Case #" << i+1 << ": ";
            solve();
        }

        gettimeofday(&end,NULL);
        span = (end.tv_sec -start.tv_sec)*1000000LL + (end.tv_usec - start.tv_usec);
        std::cerr << "--Total Time: " << span/1000 << "ms" << endl;
        return 0;
    }

snippet     UnionFind
abbr        class UnionFind
options     head
    class UnionFind {
        vector<int> par;
        vector<int> sizes;
        public:
            UnionFind(int n) : par(n), sizes(n, 1) {
                for (int i = 0; i < n; i++) {
                    par[i] = i;
                }
            }
            int find(int x) {
               if (x == par[x]) return x;
               return par[x] = find(par[x]);
            }
            void unite(int x, int y) {
                x = find(x);
                y = find(y);
                if (x == y) return;
                if (sizes[x] < sizes[y]) swap(x, y);
                par[y] = x;
                sizes[x] += sizes[y];
            }
            bool same(int x, int y) {
                return find(x) == find(y);
            }
            int size(int x) {
                return sizes[find(x)];
            }
    };

snippet     Factrial
abbr        template <typename T> class Factorial {
options     head
    long long MOD = 1e9+7;

    template <typename T> class Factorial {
      public:
        vector<T> fact;
        vector<T> factinv;
        Factorial(int N);
        static T bipow(T c, T n);
        static T square(T n);
        T conv(T n, T m) const;
        T perm(T n, T m) const;
    };

    template <typename T> Factorial<T>::Factorial(int N) : fact(N+1), factinv(N+1) {
      fact[0] = 1;
      for (int i = 1; i < N+1; i++) {
        fact[i] = fact[i-1]*static_cast<T>(i)%MOD;
      }
      factinv[N] = bipow(fact[N], MOD-2);
      for (int i = N; i > 0; i--) {
        factinv[i-1] = factinv[i]*static_cast<T>(i)%MOD;
      }
    }

    template <typename T> T Factorial<T>::bipow(T c, T n) {
      if (n == 0) {
        return 1;
      } else if(n == 1) {
        return c;
      } else if(n%2 == 0) {
        return square(bipow(c, n/2))%MOD;
      } else {
        return (static_cast<T>(c)*square(bipow(c, (n-1)/2)))%MOD;
      }
    }

    template <typename T> T Factorial<T>::square(T n) {
      return static_cast<long long>(n)*n%MOD;
    }

    template <typename T> T Factorial<T>::conv(T n, T m) const {
      if (n < m) {
        return 0;
      }
      return (((static_cast<long long>(fact[n])*factinv[m])%MOD)*factinv[n-m])%MOD;
    }

    template <typename T> T Factorial<T>::perm(T n, T m) const {
      if (n < m) {
        return 0;
      }
      return (static_cast<long long>(fact[n])*factinv[n-m])%MOD;
    }


snippet     Dinic
abbr        template<typename T> class Dinic {
options     head
    template<typename T>
    class Dinic {
        struct edge {
            int to;
            T cap;
            int rev;
        };

        const T INF;
        vector< vector<edge> > graph;
        vector<T> min_cost;
        vector<int> iter;

        bool bfs(int s, int t) {
            min_cost.assign(graph.size(), -1);
            queue<int> que;
            min_cost[s] = 0;
            que.push(s);
            while (!que.empty()) {
                int q = que.front();
                que.pop();
                for (edge &e : graph[q]) {
                    if (e.cap > 0 && min_cost[e.to] == -1) {
                        min_cost[e.to] = min_cost[q] + 1;
                        que.push(e.to);
                    }
                }
            }
            return (min_cost[t] != -1);
        }

        T dfs(int idx, const int t, T flow) {
            if (idx == t) return flow;
            for (int &i = iter[idx]; i < graph[idx].size(); i++) {
                edge &e = graph[idx][i];
                if (e.cap > 0 && min_cost[idx] < min_cost[e.to]) {
                    T d = dfs(e.to, t, min(flow, e.cap));
                    if (d > 0) {
                        e.cap -= d;
                        graph[e.to][e.rev].cap += d;
                        return d;
                    }
                }
            }
            return 0;
        }

        public:
            Dinic(int n) : INF(numeric_limits<T>::max()/100) {
                graph.resize(n);
            }

            void add_edge(int from, int to, T cap) {
                graph[from].push_back((edge){to, cap, static_cast<int>(graph[to].size())});
                graph[to].push_back((edge){from, 0, static_cast<int>(graph[from].size())-1}); //add reverse edge
            }

            T max_flow(int s, int t) {
                T flow = 0;
                while (bfs(s, t)) {
                    iter.assign(graph.size(), 0);
                    T f = 0;
                    while ((f = dfs(s, t, INF)) > 0) {
                        flow += f;
                    }
                }
                return flow;
            }
    };

snippet     SegmentTree
abbr        template<typename T> class SegTree {
options     head
    template<typename T>
    class SegTree {
        const T INF;
        std::vector<T> nodes;
        std::function<const T&(const T&, const T&)> calc;
        int n;
        T query_(int a,int b, int k, int l, int r){
            if(r <= a || b <= l) return INF;
            if(a <= l && r <= b) {
                return nodes[k];
            } else {
                T vl = query_(a, b, k*2 + 1, l, (l+r)/2);
                T vr = query_(a, b, k*2 + 2, (l+r)/2, r);
                return calc(vl, vr);
            }
        }

        public:
            SegTree(vector<T>& vec, const std::function<const T&(const T&, const T&)>& func, const T& inf) : INF(inf) {
                this->calc = func;
                int n_ = vec.size();
                this->n = 1;
                while (n_ > n) n *= 2;
                nodes.assign(n*2-1, INF);
                for (int i = 0; i < n_; i++) {
                    update(i, vec[i]);
                }
            }
            void update(int k, const T& a){
                k += n-1;
                nodes[k] = a;
                while (k > 0) {
                    k = (k-1)/2;
                    nodes[k] = calc(nodes[k*2+1], nodes[k*2+2]);
                }
            }
            T query(int a, int b){
                return query_(a, b, 0, 0, n);
            }
    };

    template<typename T>
    struct F {
        const T& operator()(const T& a, const T& b) {
            return a < b ? a : b;
        }

snippet     imos2d
abbr        template<typename T> class Imos2D {
options     head
    template<typename T>
    class Imos2D {
        std::vector< std::vector<T> > cumsum;
    public:
        Imos2D(const std::vector< std::vector<T> >& a) {
            int h = a.size(), w = a[0].size();
            cumsum.assign(h+1, std::vector<T>(w+1, 0));
            for (int i = 0; i < h; i++) {
                for (int j = 0; j < w; j++) {
                    cumsum[i+1][j+1] = a[i][j];
                }
            }
            for (int i = 1; i < h+1; i++) {
                for (int j = 0; j < w; j++) {
                    cumsum[i][j+1] += cumsum[i][j];
                }
            }
            for (int i = 0; i < h; i++) {
                for (int j = 1; j < w+1; j++) {
                    cumsum[i+1][j] += cumsum[i][j];
                }
            }
        };
        T sum(int i, int j, int h, int w) {
            return (cumsum[i+h][j+w] - cumsum[i][j+w]) - (cumsum[i+h][j] - cumsum[i][j]);
        }
    };
